Comandos GIT:

# Para transformar o diretório atual em um repositório GIT basta apenas executar o comando:
# Initialized empty Git repository in (diretório)
$ git init  -- Foi criado uma pasta oculta .git

# Para avaliar a situação atual do repositório:
$ git status

# Para rastrear um arquivo do repositório:
$ git add nome_arquivo 
-- rastreia o arquivos em questão
-- O comando add coloca o arquivos em uma área chamada stage. A partir desse momento todas as alterações no arquivo são rastreadas
-- Cada alteração no arquivo deve ser rastreada com o comando add

# Para rastrear vários arquivos do repositório:
$ git add .
-- O ponto (.) indica que todos os arquivos do repositório serão rastreados, inclusive subdiretórios

# Para evitar que arquivos/diretórios sejam rastreados
-- Para evitar que arquivos ou diretórios sejam rastreados é necessário criar um arquivo chamado .gitignore no diretório principal do repositório
com o conteúdo que deve ser ignorado pelo rastreamento do git, como por exemplo:
  Quero barrar os arquivos de extensão .log, devo adicionar o arquivo .gitignore o conteúdo *.log
  Quero barrar os arquivos de extensão .bmp, devo adicionar o arquivo .gitignore o conteúdo *.bmp
  Quero barrar os arquivos de extensão .txt do subdiretório imagens, devo adicionar o conteúdo imagens/*.txt
  Exemplo pode ser encontrados em https://github.com/github/gitignore
  * O arquivo .gitignore também deve ser rastreado, pois evoluirá junto com o projeto.

## Após rastrear as mudanças é preciso comita-las:
$ git commit -m 'Texto para o commit' -- A cada nova alteração é necessário rastrear e comitar o arquivo

## Para rastrear e commitar as alterações em um único comando (Apenas para arquivos que já foram rastreados antes)
$ git commit -a -m 'add e commit em um unico comando'
ou
$ git commit -am 'add e commit em um unico comando'
-- Arquivos novos devem ser rastrados ao menos uma vez para que suas mudanças possam ser adicionadas e commitadas em um único comando posteriormente

## Para verificar o histórico das alterações:
$ git log

## Para visualizar um determinado número de commits:
$ git log -n X

## Para visualizar os detalhes dos commits executados:
$ git log --oneline


## Para visualizar um resumo das alterações:
$ git log --stat

## Combinando comandos de visualização de log:
-- É possível combinar vários comando em um único para ter uma melhor visualização dos log
$ git log -n 2 --oneline --stat

## Verificando as mudanças que ainda não foram rastreadas:
$ git diff
-- Este comando vai exibir as diferenças entre o último commit e as alterações que ainda não foram rastreadas
-- Para verificar as diferenças de um arquivo especifico, é preciso passar o nome do arquivo após o comando diff
-- Este comando não funciona para arquivos que ainda não foram rastreados ao menos uma vez.

## Verificando as mudanças que foram rastreadas, mas que ainda não foram commitadas:
$ git diff --staged

## Verificando as mudanças que foram e as que ainda não foram rastreadas:
$ git diff (código do ultimo commit $ git log -n 1 --oneline)

## Deletando arquivos do repositório:
$ git rm (nome arquivo)
-- O comando rm remove o arquivo em questão e também adiciona a deleção na stage do repositório
-- A deleteção também tem a necessidade de ser commitada no repositório

## Renomeando arquivos:
$ git mv nome_antigo nome_novo

## Desfazendo mudanças não desejadas
$ git checkout -- nome_arquivo
-- Este comando faz com que as alterações realizadas em determinado arquivo sejam desfeitas (com a condição de que ainda não tenham sido rastreadas - ainda não estão na área do stage)
-- Caso exista mudanças que estejam na área do stage, elas não serão afetadas por este comando.
-- É preciso que o arquivos tenha sido rastreado ao menos uma vez

## Desfazendo mudanças não desejadas, mas que já foram rastreadas
$ git reset -- nome_arquivo
-- Este comando retirar as mudanças da área da stage, porém mantém as alterações efetuadas no arquivo (As mudanças ficam fora da stage)

$ git reset
-- O comando sem nenhum parâmetro retira todas as alterações de todos os arquivos da área de stage (As mudanças permanecem fora da stage)

## Desfazendo mudanças não desejadas, mas que já foram rastreadas (Retirando da stage e eliminando as mudanças)
$ git reset --hard
-- O comando hard retira todos os arquivos da área de stage e desfaz todas as alterações realizadas neles. O repositório voltar a ficar como no último commit realizado

## Desfazendo mudanças já commitadas
$ git revert --no-edit (código commit)
-- O comando revert desfaz as alterações realizadas no commit passado com parâmetro
-- Se o comando --no-edit não for passada, será aberto um editor para definirmos uma mensagem para o novo commit


## Repositórios Remotos







## Listar Branchs
$ git branch
-- Branch é um linha independente de desenvolvimento
-- Por padrão, o Git possui uma branch chamada master
-- O sinal * (asterisco) indica qual brach está selecionada no momento
-- Basicamento cada branch aponta para um commit

## Listar Branchs com os commits associados
$ git branch -v

## Criar Branchs
$ git branch (nome novo branch)

## Alternar entre Branchs
$ git checkout (nome do branch)

## Criar e alternar Branchs em um único comando
$ git checkout -b (nome novo branch)

## Deletar um branch (que não possuam commits pendentes)
$ git branch -d (nome do branch)
-- Não é possível remover um branch enquanto estiver nela. É necessário fazer checkout para outro branch (error: Cannot delete the branch 'Nome do Branch' which you are currently on.)
-- O comando -d não deleta branchs que tenham commits que ainda não foram aplicados em outros branchs (error: The branch 'BranchTeste' is not fully merged. If you are sure you want to delete it, run 'git branch -D BranchTeste'.)

## Deletar um branch (definitivamente)
$ git branch -D (nome do branch)
-- Os commits realizados nesse branch serão descartados

## Visualizando mudanças não mescladas entre Branchs
$ git branch --no-merged

## Mesclando alterações de branchs diferentes
$ git merge (nome do branch a ser mesclado) -m "texto commit"
-- Quando efetuamos uma mesclagem o git cria um novo commit

## Mesclando alterações e garantindo o commit
-- existem situações queo git não realiza o commit, apena muda o apontamento do branch. Isso chama-se fast foward.
-- para garantir que o seja efetuado o commit,, usar o --no-ff
$ git merge --no-ff one -m "mesclando one"
